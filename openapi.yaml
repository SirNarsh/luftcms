---
openapi: 3.0.0
info:
  title: Luftcms API [WIP]
  version: 1.0.0-alpha.1
  license:
    name: MIT
servers:
- url: https://api-testing.luftcms.com/
- url: http://localhost:8080
  description: ""
paths:
  /items:
    get:
      tags:
      - items
      parameters:
      - name: limit
        description: How many items to return at one time (max 100)
        schema:
          format: int32
          type: integer
        in: query
        required: false
      - name: offset
        description: Skip x items (pagination)
        schema:
          format: int32
          type: integer
        in: query
        required: false
      - name: collection_id
        description: filter by collection_id
        schema:
          format: int32
          type: integer
        in: query
        required: false
      - name: type_id
        schema:
          type: integer
        in: query
        required: false
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "200":
          headers:
            x-next:
              schema:
                type: string
              description: A link to the next page of responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsCollection'
          description: A paged array of items
      operationId: listItems
      summary: List all items available
    post:
      tags:
      - items
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "201":
          description: Null response
      operationId: createItem
      summary: Create a new item
  /types:
    summary: Path used to manage the list of types.
    description: The REST endpoint/path used to list and create zero or more `type`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - types
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type'
          description: Successful response - returns an array of `type` entities.
      operationId: gettypes
      summary: List All types
      description: Gets a list of all `type` entities.
    post:
      requestBody:
        description: A new `type` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
        required: true
      tags:
      - types
      responses:
        "201":
          description: Successful response.
      operationId: createtype
      summary: Create a type
      description: Creates a new instance of a `type`.
  /types/{typeId}:
    summary: Path used to manage a single type.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `type`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
          description: Successful response - returns a single `type`.
      operationId: gettype
      summary: Get a type
      description: Gets the details of a single instance of a `type`.
    put:
      requestBody:
        description: Updated `type` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
        required: true
      tags:
      - types
      responses:
        "202":
          description: Successful response.
      operationId: updatetype
      summary: Update a type
      description: Updates an existing `type`.
    delete:
      tags:
      - types
      responses:
        "204":
          description: Successful response.
      operationId: deletetype
      summary: Delete a type
      description: Deletes an existing `type`.
    parameters:
    - name: typeId
      description: A unique identifier for a `type`.
      schema:
        type: integer
      in: path
      required: true
  /tags:
    summary: Path used to manage the list of tags.
    description: The REST endpoint/path used to list and create zero or more `tag`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsCollection'
          description: Successful response - returns an array of `tag` entities.
      operationId: gettags
      summary: List All tags
      description: Gets a list of all `tag` entities.
    post:
      requestBody:
        description: A new `tag` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      tags:
      - tags
      responses:
        "201":
          description: Successful response.
      operationId: createtag
      summary: Create a tag
      description: Creates a new instance of a `tag`.
  /itemTags:
    summary: Path used to manage the list of ItemTags.
    description: The REST endpoint/path used to list and create zero or more `ItemTag`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - itemTags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemTagsCollection'
          description: Successful response - returns an array of `ItemTag` entities.
      operationId: getItemTags
      summary: List All ItemTags
      description: Gets a list of all `ItemTag` entities.
    post:
      requestBody:
        description: A new `ItemTag` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemTag'
        required: true
      tags:
      - itemTags
      responses:
        "201":
          description: Successful response.
      operationId: createItemTag
      summary: Create a ItemTag
      description: Creates a new instance of a `ItemTag`.
  /itemTags/{itemTagId}:
    summary: Path used to manage a single ItemTag.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `ItemTag`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - itemTags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemTag'
          description: Successful response - returns a single `ItemTag`.
      operationId: getItemTag
      summary: Get a ItemTag
      description: Gets the details of a single instance of a `ItemTag`.
    put:
      requestBody:
        description: Updated `ItemTag` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemTag'
        required: true
      tags:
      - itemTags
      responses:
        "202":
          description: Successful response.
      operationId: updateItemTag
      summary: Update a ItemTag
      description: Updates an existing `ItemTag`.
    delete:
      tags:
      - itemTags
      responses:
        "204":
          description: Successful response.
      operationId: deleteItemTag
      summary: Delete a ItemTag
      description: Deletes an existing `ItemTag`.
    parameters:
    - name: itemTagId
      description: A unique identifier for a `ItemTag`.
      schema:
        type: integer
      in: path
      required: true
  /items/{itemId}:
    get:
      tags:
      - items
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Expected response to a valid request
        "401":
          description: Requires login
        "403":
          description: User can't read item
        "404":
          description: Item not found
      summary: Info for a specific Item
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example:
                value:
                  id: 81
                  value: some text
                  item_name: some text
                  type_id: 60
                  user_id: 72
                  created_at: 2018-02-10 09:30
                  updated_at: 2018-02-10 09:30
        required: true
      tags:
      - items
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item updated
        "401":
          description: Requires login
        "403":
          description: User can't read item
        "404":
          description: Item not found
      summary: Update item
    delete:
      responses:
        "204":
          description: Successfull deletion
        "401":
          description: Requires login
        "403":
          description: User can't read item
        "404":
          description: Item not found
    parameters:
    - name: itemId
      schema:
        type: integer
      in: path
      required: true
  /tags/{tagId}:
    summary: Path used to manage a single tag.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `tag`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Successful response - returns a single `tag`.
      operationId: gettag
      summary: Get a tag
      description: Gets the details of a single instance of a `tag`.
    put:
      requestBody:
        description: Updated `tag` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      tags:
      - tags
      responses:
        "202":
          description: Successful response.
      operationId: updatetag
      summary: Update a tag
      description: Updates an existing `tag`.
    delete:
      tags:
      - tags
      responses:
        "204":
          description: Successful response.
      operationId: deletetag
      summary: Delete a tag
      description: Deletes an existing `tag`.
    parameters:
    - name: tagId
      description: A unique identifier for a `tag`.
      schema:
        type: integer
      in: path
      required: true
  /users:
    summary: Path used to manage the list of Users.
    description: The REST endpoint/path used to list and create zero or more `Users`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: Successful response - returns an array of `Users` entities.
      summary: List All Users
      description: Gets a list of all `Users` entities.
    post:
      requestBody:
        description: A new `Users` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
      - users
      responses:
        "201":
          description: Successful response.
      operationId: createUsers
      summary: Create a Users
      description: Creates a new instance of a `Users`.
  /users/{userId}:
    summary: Path used to manage a single User.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful response - returns a single `User`.
      summary: Get a User
      description: Gets the details of a single instance of a `User`.
    put:
      requestBody:
        description: Updated `User` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
      - users
      responses:
        "202":
          description: Successful response.
      summary: Update a User
      description: Updates an existing `User`.
    delete:
      tags:
      - users
      responses:
        "204":
          description: Successful response.
      summary: Delete a User
      description: Deletes an existing `User`.
    parameters:
    - name: userId
      description: A unique identifier for a `User`.
      schema:
        type: string
      in: path
      required: true
  /oauth/token:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Successfully logged in
      summary: User login
components:
  schemas:
    Error:
      required:
      - code
      - message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
    TokenRequest:
      description: The root of the TokenRequest type's schema.
      type: object
      properties:
        grant_type:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        username:
          type: string
        password:
          type: string
        scope:
          type: string
      example:
        grant_type: password
        client_id: client-id
        client_secret: client-secret
        username: sirnarsh
        password: my-password
        scope: '*'
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          format: int32
          type: integer
      example:
        access_token: xyz
        refresh_token: abc
        expires_in: 35000
    CollectionResponse:
      title: Root Type for CollectionResponse
      description: Example minimum required fields for collection (paginated) response
      type: object
      properties:
        total:
          format: int32
          type: integer
        per_page:
          format: int32
          type: integer
        current_page:
          format: int32
          type: integer
        last_page:
          format: int32
          type: integer
        data:
          type: array
          items: {}
      example:
        total: 50
        per_page: 15
        current_page: 1
        last_page: 4
        data: []
    ItemsCollection:
      title: Root Type for CollectionResponse
      description: Example minimum required fields for collection (paginated) response
      type: object
      allOf:
      - type: object
        properties:
          total:
            format: int32
            type: integer
          per_page:
            format: int32
            type: integer
          current_page:
            format: int32
            type: integer
          last_page:
            format: int32
            type: integer
          data:
            type: array
            items:
              $ref: '#/components/schemas/Item'
      example:
        total: 50
        per_page: 15
        current_page: 1
        last_page: 4
        data: []
    Item:
      required:
      - id
      - item_name
      - type_id
      - user_id
      properties:
        id:
          format: int64
          type: integer
        value:
          type: string
        item_name:
          type: string
        type_id:
          type: integer
        user_id:
          type: integer
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
    ItemTag:
      description: 1-1 Relation pivot table
      type: object
      properties:
        id:
          format: int32
          type: integer
        item_id:
          format: int32
          type: integer
        tag_id:
          format: int32
          type: integer
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      example: |-
        {
            "id": 1,
            "item_id": 1,
            "tag_id": 1,
            "created_at": "2019-05-25 10:00:00",
            "updated_at": "2019-05-25 10:00:00"
        }
    Tag:
      description: Item Tag
      type: object
      properties:
        id:
          format: int32
          type: integer
        tag_name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      example: |-
        {
            "id": 1,
            "tag_name": "Featured",
            "created_at": "2019-05-25 10:00:00",
            "updated_at": "2019-05-25 10:00:00"
        }
    User:
      title: Root Type for Users
      description: The root of the Users type's schema.
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          format: password
          description: Only on registration and update requests
          type: string
        email_verified_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      example:
        id: 1
        name: SirNarsh
        email: sirnarsh@example.com
        password: password
        email_verified_at: 2019-05-26 16:00:00
        created_at: 2019-05-26 16:00:00
        updated_at: 2019-05-26 16:00:00
    Type:
      description: An Item Type
      type: object
      properties:
        id:
          format: int32
          type: integer
        type_name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      example: |-
        {
            "id": 1,
            "type_name": "Post",
            "created_at": "2019-05-25 10:00:00",
            "updated_at": "2019-05-25 10:00:00"
        }
    TagsCollection:
      title: Root Type for CollectionResponse
      description: Example minimum required fields for collection (paginated) response
      type: object
      properties:
        total:
          format: int32
          type: integer
        per_page:
          format: int32
          type: integer
        current_page:
          format: int32
          type: integer
        last_page:
          format: int32
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      example:
        total: 50
        per_page: 15
        current_page: 1
        last_page: 4
        data: []
    ItemTagsCollection:
      title: Root Type for CollectionResponse
      description: Example minimum required fields for collection (paginated) response
      type: object
      properties:
        total:
          format: int32
          type: integer
        per_page:
          format: int32
          type: integer
        current_page:
          format: int32
          type: integer
        last_page:
          format: int32
          type: integer
        data:
          type: array
          items: {}
      example:
        total: 50
        per_page: 15
        current_page: 1
        last_page: 4
        data: []
    UsersCollection:
      title: Root Type for CollectionResponse
      description: Example minimum required fields for collection (paginated) response
      type: object
      properties:
        total:
          format: int32
          type: integer
        per_page:
          format: int32
          type: integer
        current_page:
          format: int32
          type: integer
        last_page:
          format: int32
          type: integer
        data:
          $ref: '#/components/schemas/UsersCollection'
      example:
        total: 50
        per_page: 15
        current_page: 1
        last_page: 4
        data: []
  securitySchemes:
    AccessToken:
      scheme: bearer
      type: http
security:
- AccessToken: []
tags:
- name: items
  description: ""
- name: tags
  description: ""
- name: auth
  description: ""
- name: itemTags
  description: ""
- name: types
  description: ""
- name: users
  description: ""
